SELECT TOP 10 
  q.query_id, 
  qt.query_text_id, 
  SUM(rs.count_executions) AS total_execution_count, 
  MAX(rs.last_execution_time) AS last_execution_time 
FROM sys.query_store_query_text AS qt 
INNER JOIN sys.query_store_query AS q 
  ON qt.query_text_id = q.query_text_id 
INNER JOIN sys.query_store_plan AS p 
  ON q.query_id = p.query_id 
INNER JOIN sys.query_store_runtime_stats AS rs 
  ON p.plan_id = rs.plan_id 
WHERE rs.last_execution_time > '6/11/2024 8:29:07 PM' 
      AND rs.last_execution_time < DATEADD(HOUR, 2, '6/11/2024 8:29:07 PM') 
GROUP BY 
  q.query_id, 
  qt.query_text_id, 
  qt.query_sql_text 
ORDER BY total_execution_count DESC;



------
GPT
-------
-- Identify queries causing high CPU due to frequent execution
WITH FrequentQueries AS (
    SELECT 
        qs.execution_count,
        qs.total_worker_time / 1000 AS total_worker_time_ms,
        qs.total_worker_time / qs.execution_count / 1000 AS avg_worker_time_ms,
        qs.total_elapsed_time / 1000 AS total_elapsed_time_ms,
        qs.total_elapsed_time / qs.execution_count / 1000 AS avg_elapsed_time_ms,
        qs.total_logical_reads,
        qs.total_logical_reads / qs.execution_count AS avg_logical_reads,
        qs.total_logical_writes,
        qs.total_logical_writes / qs.execution_count AS avg_logical_writes,
        qs.total_physical_reads,
        qs.total_physical_reads / qs.execution_count AS avg_physical_reads,
        qs.creation_time,
        qs.last_execution_time,
        SUBSTRING(st.text, (qs.statement_start_offset/2) + 1,
            ((CASE statement_end_offset
                WHEN -1 THEN DATALENGTH(st.text)
                ELSE qs.statement_end_offset
              END - qs.statement_start_offset)/2) + 1) AS query_text,
        DB_NAME(st.dbid) AS database_name,
        OBJECT_NAME(st.objectid, st.dbid) AS object_name
    FROM 
        sys.dm_exec_query_stats AS qs
    CROSS APPLY 
        sys.dm_exec_sql_text(qs.sql_handle) AS st
    WHERE 
        qs.execution_count > 1000 -- Adjust this threshold based on your environment
)
SELECT 
    database_name,
    object_name,
    query_text,
    execution_count,
    total_worker_time_ms,
    avg_worker_time_ms,
    total_elapsed_time_ms,
    avg_elapsed_time_ms,
    total_logical_reads,
    avg_logical_reads,
    total_logical_writes,
    avg_logical_writes,
    total_physical_reads,
    avg_physical_reads,
    creation_time,
    last_execution_time
FROM 
    FrequentQueries
ORDER BY 
    execution_count DESC;
